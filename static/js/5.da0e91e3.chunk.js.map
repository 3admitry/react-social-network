{"version":3,"file":"static/js/5.da0e91e3.chunk.js","mappings":"uKACA,G,QAA0B,0BAA1B,EAA4D,wBAA5D,EAAgG,2BAAhG,EAAwI,4BAAxI,EAA6K,wBAA7K,EAAgN,0BAAhN,EAAoP,yBAApP,EAAoR,sBAApR,EAA8T,mCAA9T,EAA6X,2CAA7X,EAA2b,kC,mBCG9aA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAME,UAAWC,EAA9B,WACI,gBAAKD,UAAWC,EAAUE,IAAKN,EAAMO,OAAQC,IAAI,MACjD,0BAAOR,EAAMS,aCPhBC,EAAU,SAACV,GACpB,OACI,gBAAKG,UAAWQ,EAAhB,UACI,yBAAMX,EAAMY,a,iDCcxB,GAAeC,E,QAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAhBkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACC,GACtB,MAAO,CACHC,cAAe,SAACC,GACZF,GAASG,EAAAA,EAAAA,IAAaD,SAKlC,ECZuB,SAACpB,GAEpB,OAA4DsB,EAAAA,EAAAA,MAArDC,EAAP,EAAOA,aAA0BC,EAAjC,EAAqBC,UAAYD,OAASE,EAA1C,EAA0CA,MAAOC,EAAjD,EAAiDA,QAC7CC,EAAc5B,EAAMiB,YAAYY,aAAaC,KAAI,SAACC,EAAGC,GACrD,OAAO,SAACjC,EAAD,CAAoBU,KAAMsB,EAAEtB,KAAMP,GAAI6B,EAAE7B,GAAIK,OAAQwB,EAAEE,QAArCD,MAExBE,EAAgBlC,EAAMiB,YAAYkB,SAASL,KAAI,SAAC1B,EAAG4B,GAAJ,OAAU,SAACtB,EAAD,CAAiBE,QAASR,EAAEQ,SAAdoB,MAO3E,OACI,iBAAK7B,UAAWQ,EAAhB,WACI,gBAAKR,UAAWQ,EAAhB,SACKiB,KAEL,iBAAKzB,UAAWQ,EAAhB,UACKuB,GACD,kBAAME,SAAUb,GAZX,SAACc,GACdrC,EAAMmB,cAAckB,EAAKzB,SACzBc,OAUgDvB,UAAWQ,EAAnD,WACI,0BACI,SAAC,KAAD,CACIF,KAAK,UACLkB,QAASA,EACTW,MAAO,CAACC,UAAU,GAClBC,OAAQ,gBAAEC,EAAF,EAAEA,MAAF,OAAa,+BACjB,iBAAKtC,UAAWQ,EAAhB,WACI,SAAC+B,EAAA,GAAD,QAAUvC,UAAWQ,EAAiCgC,KAAM,EAClDC,YAAY,oBAAoBC,UAAW,KAASJ,IAC7DjB,EAAOZ,UAAW,gBAAKD,MAAO,CAACmC,MAAO,OAApB,+CAMnC,gBAAK3C,UAAWQ,EAAhB,UACI,SAAC,IAAD,CAAQoC,KAAK,UAAUC,SAAS,SAAhC","sources":["webpack://samurai/./src/components/Dialogs/Dialogs.module.scss?d037","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-JPAF\",\"dialog\":\"Dialogs_dialog__foZpA\",\"dialogBox\":\"Dialogs_dialogBox__A2qHx\",\"dialogLink\":\"Dialogs_dialogLink__7kOn1\",\"avatar\":\"Dialogs_avatar__zLSfa\",\"messages\":\"Dialogs_messages__NvJ43\",\"message\":\"Dialogs_message__cyYSl\",\"form\":\"Dialogs_form__JWiHj\",\"formItemContainer\":\"Dialogs_formItemContainer__mQ7YZ\",\"formItemContainerTextArea\":\"Dialogs_formItemContainerTextArea__mQTtr\",\"formSubmitButton\":\"Dialogs_formSubmitButton__COZ9C\"};","import React from 'react';\r\nimport m from '../Dialogs.module.scss'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={m.dialogBox}>\r\n            <NavLink to={path} className={m.dialogLink}>\r\n                <img className={m.avatar} src={props.avatar} alt=\"\"/>\r\n                <span>{props.name}</span>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport style from '../Dialogs.module.scss'\r\n\r\nexport const Message = (props) => {\r\n    return (\r\n        <div className={style.message}>\r\n            <div>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {addMessageAC} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addNewMessage: (value) => {\r\n            dispatch(addMessageAC(value))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs);\r\n","import React from 'react';\r\nimport style from './Dialogs.module.scss'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport {Button} from \"antd\";\r\n\r\nexport const Dialogs = (props) => {\r\n\r\n    const {handleSubmit, formState: {errors}, reset, control} = useForm();\r\n    let dialogItems = props.dialogsPage.dialogsItems.map((d, i) => {\r\n        return <DialogItem key={i} name={d.name} id={d.id} avatar={d.avaUrl}/>\r\n    })\r\n    let messagesItems = props.dialogsPage.messages.map((m, i) => <Message key={i} message={m.message}/>)\r\n\r\n    const onSubmit = (data) => {\r\n        props.addNewMessage(data.message);\r\n        reset();\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialog}>\r\n                {dialogItems}\r\n            </div>\r\n            <div className={style.messages}>\r\n                {messagesItems}\r\n                <form onSubmit={handleSubmit(onSubmit)} className={style.form}>\r\n                    <div>\r\n                        <Controller\r\n                            name=\"message\"\r\n                            control={control}\r\n                            rules={{required: true}}\r\n                            render={({field}) => <>\r\n                                <div className={style.formItemContainer}>\r\n                                    <TextArea className={style.formItemContainerTextArea} rows={4}\r\n                                              placeholder=\"Type your message\" maxLength={250} {...field}/>\r\n                                    {errors.message && <div style={{color: 'red'}}>This field is required</div>}\r\n                                </div>\r\n                            </>\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div className={style.formSubmitButton}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Send message\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n};"],"names":["DialogItem","props","path","id","className","m","to","src","avatar","alt","name","Message","style","message","compose","withAuthRedirect","connect","state","dialogsPage","dispatch","addNewMessage","value","addMessageAC","useForm","handleSubmit","errors","formState","reset","control","dialogItems","dialogsItems","map","d","i","avaUrl","messagesItems","messages","onSubmit","data","rules","required","render","field","TextArea","rows","placeholder","maxLength","color","type","htmlType"],"sourceRoot":""}